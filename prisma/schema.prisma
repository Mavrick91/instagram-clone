datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model notifications {
  id          Int               @id @default(autoincrement())
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  type        notification_type
  sender      users             @relation("SentNotifications", fields: [sender_id], references: [id])
  sender_id   Int
  receiver    users             @relation("ReceivedNotifications", fields: [receiver_id], references: [id])
  receiver_id Int
  picture     pictures?          @relation(fields: [picture_id], references: [id])
  picture_id  Int?
  comment     comments?          @relation(fields: [comment_id], references: [id])
  comment_id  Int?

  read Boolean @default(false)
}

enum notification_type {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  MESSAGE
  // Add more notification types as needed
}

model users {
  id                     Int            @id @default(autoincrement())
  email                  String         @unique
  username               String         @unique
  password               String
  first_name             String
  last_name              String
  bio                    String?
  avatar                 String?
  avatar_name            String?
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  pictures               pictures[]
  comments               comments[]
  is_mock                Boolean        @default(false)
  initiated_follows      follows[]       @relation("FollowedBy")
  received_follows       follows[]       @relation("Following")
  close_friends          users[]        @relation("CloseFriends")
  close_friends_of       users[]        @relation("CloseFriends")
  likes                  likes[]
  collections            collections[]
  sent_notifications     notifications[] @relation("SentNotifications")
  received_notifications notifications[] @relation("ReceivedNotifications")
  thought                thoughts?
  threads                threads[]       @relation("UserThreads")
  messages               messages[]
}

model threads {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  users      users[]   @relation("UserThreads")
  messages   messages[]
}

model messages {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  content    String
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
  thread     threads   @relation(fields: [thread_id], references: [id])
  thread_id  Int
}

model thoughts {
  id         Int        @id @default(autoincrement())
  content    String
  user       users      @relation(fields: [user_id], references: [id])
  user_id    Int        @unique
  visibility visibility @default(FOLLOWERS)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

enum visibility {
  FOLLOWERS
  CLOSE_FRIENDS
}

model collections {
  id         Int                     @id @default(autoincrement())
  name       String
  name_id    String
  is_default Boolean
  created_at DateTime                @default(now())
  user_id    Int
  user       users                   @relation(fields: [user_id], references: [id])
  pictures   picture_on_collections[]
}

model follows {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  initiator      users    @relation("FollowedBy", fields: [initiator_id], references: [id])
  initiator_id   Int
  target_user    users    @relation("Following", fields: [target_user_id], references: [id])
  target_user_id Int
}

model pictures {
  id                         Int                     @id @default(autoincrement())
  file_name                  String
  description                String?
  alt_text                   String?                 @default("")
  hide_likes_and_view_counts Boolean                 @default(false)
  disable_comments           Boolean                 @default(false)
  user                       users                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id                    Int
  created_at                 DateTime                @default(now())
  updated_at                 DateTime                @updatedAt
  comments                   comments[]               @relation("PictureComments")
  likes                      likes[]                  @relation("PictureLikes")
  collection                 picture_on_collections[]
  sizes                      Json
  notifications              notifications[]
  is_in_any_collection       Boolean                 @default(false) // For any collection

  @@index([user_id])
}

model picture_on_collections {
  picture_id    Int
  picture       pictures    @relation(fields: [picture_id], references: [id], onDelete: Cascade)
  collection_id Int
  collection    collections @relation(fields: [collection_id], references: [id], onDelete: Cascade)

  @@id([picture_id, collection_id])
  @@index([picture_id])
  @@index([collection_id])
}

model comments {
  id            Int            @id @default(autoincrement())
  content       String
  user          users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  picture       pictures        @relation("PictureComments", fields: [picture_id], references: [id], onDelete: Cascade)
  picture_id    Int
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  notifications notifications[]
}

model likes {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  picture    pictures  @relation("PictureLikes", fields: [picture_id], references: [id], onDelete: Cascade)
  picture_id Int
}
